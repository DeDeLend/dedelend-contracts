/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DdlInterface extends ethers.utils.Interface {
  functions: {
    "COLLATERAL_DECIMALS()": FunctionFragment;
    "INTEREST_RATE_DECIMALS()": FunctionFragment;
    "LTV()": FunctionFragment;
    "LTV_DECIMALS()": FunctionFragment;
    "PriorLiqPriceCoef()": FunctionFragment;
    "USDC()": FunctionFragment;
    "borrow(uint256,uint256)": FunctionFragment;
    "borrowedByOption(uint256)": FunctionFragment;
    "calculateUpcomingFee(uint256)": FunctionFragment;
    "collateralInfo(uint256)": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "currentLiqPrice(uint256)": FunctionFragment;
    "currentPrice(uint256)": FunctionFragment;
    "exerciseByPriorLiqPrice(uint256)": FunctionFragment;
    "forcedExercise(uint256)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "liqPrice(uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "loanState(uint256)": FunctionFragment;
    "loanStateByPriorLiqPrice(uint256)": FunctionFragment;
    "lockOption(uint256)": FunctionFragment;
    "maxBorrowLimit(uint256)": FunctionFragment;
    "minBorrowLimit()": FunctionFragment;
    "operationalPool()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "priorLiqPrice(uint256)": FunctionFragment;
    "profitByOption(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "setInterestRate(uint256)": FunctionFragment;
    "setInterestRateDecimals(uint256)": FunctionFragment;
    "setLTV(uint256)": FunctionFragment;
    "setMinBorrowLimit(uint256)": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "strategyType(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COLLATERAL_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LTV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LTV_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PriorLiqPriceCoef",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedByOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUpcomingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentLiqPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseByPriorLiqPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forcedExercise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liqPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanStateByPriorLiqPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minBorrowLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operationalPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priorLiqPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "profitByOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLTV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategyType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLATERAL_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LTV_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PriorLiqPriceCoef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowedByOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUpcomingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLiqPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseByPriorLiqPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forcedExercise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liqPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanStateByPriorLiqPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationalPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priorLiqPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitByOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "Borrow(address,uint256,uint256,address,uint256)": EventFragment;
    "ExerciseByPriorLiqPrice(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ForcedExercise(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Liquidate(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Repay(address,uint256,uint256)": EventFragment;
    "Unlock(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExerciseByPriorLiqPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForcedExercise"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
}

export class Ddl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DdlInterface;

  functions: {
    COLLATERAL_DECIMALS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "COLLATERAL_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    INTEREST_RATE_DECIMALS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "INTEREST_RATE_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    LTV(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "LTV()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    LTV_DECIMALS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "LTV_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    PriorLiqPriceCoef(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "PriorLiqPriceCoef()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    USDC(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "USDC()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    borrow(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowedByOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrowed: BigNumber;
      newBorrowTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "borrowedByOption(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrowed: BigNumber;
      newBorrowTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    calculateUpcomingFee(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      upcomingFee: BigNumber;
      0: BigNumber;
    }>;

    "calculateUpcomingFee(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      upcomingFee: BigNumber;
      0: BigNumber;
    }>;

    collateralInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      strategy: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
      0: string;
      1: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
    }>;

    "collateralInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      strategy: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
      0: string;
      1: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
    }>;

    collateralToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "collateralToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    currentLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "currentLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    currentPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "currentPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    exerciseByPriorLiqPrice(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exerciseByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forcedExercise(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forcedExercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interestRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "interestRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    liqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "liqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    loanState(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "loanState(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    loanStateByPriorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "loanStateByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lockOption(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockOption(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxBorrowLimit(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxBorrowLimit(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minBorrowLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "minBorrowLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    operationalPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "operationalPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    "priorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      0: BigNumber;
    }>;

    profitByOption(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profit: BigNumber;
      0: BigNumber;
    }>;

    "profitByOption(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      profit: BigNumber;
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repay(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestRate(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestRateDecimals(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestRateDecimals(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLTV(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLTV(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinBorrowLimit(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinBorrowLimit(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPool(value: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setPool(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategyType(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "strategyType(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlock(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  COLLATERAL_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "COLLATERAL_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "INTEREST_RATE_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  LTV(overrides?: CallOverrides): Promise<BigNumber>;

  "LTV()"(overrides?: CallOverrides): Promise<BigNumber>;

  LTV_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "LTV_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  PriorLiqPriceCoef(overrides?: CallOverrides): Promise<BigNumber>;

  "PriorLiqPriceCoef()"(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  "USDC()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(uint256,uint256)"(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowedByOption(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrowed: BigNumber;
    newBorrowTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "borrowedByOption(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrowed: BigNumber;
    newBorrowTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  calculateUpcomingFee(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateUpcomingFee(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    strategy: {
      strategyAddress: string;
      amount: BigNumber;
      strike: BigNumber;
      expiration: BigNumber;
      isLong: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    };
    0: string;
    1: {
      strategyAddress: string;
      amount: BigNumber;
      strike: BigNumber;
      expiration: BigNumber;
      isLong: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    };
  }>;

  "collateralInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    strategy: {
      strategyAddress: string;
      amount: BigNumber;
      strike: BigNumber;
      expiration: BigNumber;
      isLong: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    };
    0: string;
    1: {
      strategyAddress: string;
      amount: BigNumber;
      strike: BigNumber;
      expiration: BigNumber;
      isLong: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
    };
  }>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  "collateralToken()"(overrides?: CallOverrides): Promise<string>;

  currentLiqPrice(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentLiqPrice(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPrice(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "currentPrice(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exerciseByPriorLiqPrice(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exerciseByPriorLiqPrice(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forcedExercise(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forcedExercise(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  liqPrice(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "liqPrice(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  loanState(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "loanState(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loanStateByPriorLiqPrice(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "loanStateByPriorLiqPrice(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockOption(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockOption(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxBorrowLimit(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxBorrowLimit(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minBorrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "minBorrowLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  operationalPool(overrides?: CallOverrides): Promise<string>;

  "operationalPool()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  priorLiqPrice(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priorLiqPrice(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  profitByOption(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "profitByOption(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  repay(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repay(uint256,uint256)"(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestRate(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestRate(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestRateDecimals(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestRateDecimals(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLTV(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLTV(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinBorrowLimit(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinBorrowLimit(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPool(value: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setPool(address)"(
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategyType(arg0: string, overrides?: CallOverrides): Promise<number>;

  "strategyType(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlock(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "unlock(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    COLLATERAL_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "COLLATERAL_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "INTEREST_RATE_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    LTV(overrides?: CallOverrides): Promise<BigNumber>;

    "LTV()"(overrides?: CallOverrides): Promise<BigNumber>;

    LTV_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "LTV_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PriorLiqPriceCoef(overrides?: CallOverrides): Promise<BigNumber>;

    "PriorLiqPriceCoef()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    "USDC()"(overrides?: CallOverrides): Promise<string>;

    borrow(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowedByOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrowed: BigNumber;
      newBorrowTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "borrowedByOption(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrowed: BigNumber;
      newBorrowTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    calculateUpcomingFee(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateUpcomingFee(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      strategy: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
      0: string;
      1: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
    }>;

    "collateralInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      strategy: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
      0: string;
      1: {
        strategyAddress: string;
        amount: BigNumber;
        strike: BigNumber;
        expiration: BigNumber;
        isLong: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: boolean;
      };
    }>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    "collateralToken()"(overrides?: CallOverrides): Promise<string>;

    currentLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exerciseByPriorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exerciseByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forcedExercise(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "forcedExercise(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    liqPrice(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "liqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loanState(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "loanState(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loanStateByPriorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "loanStateByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockOption(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lockOption(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxBorrowLimit(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxBorrowLimit(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBorrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "minBorrowLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    operationalPool(overrides?: CallOverrides): Promise<string>;

    "operationalPool()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    priorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitByOption(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "profitByOption(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRate(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestRate(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateDecimals(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestRateDecimals(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLTV(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setLTV(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBorrowLimit(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBorrowLimit(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(value: string, overrides?: CallOverrides): Promise<void>;

    "setPool(address)"(value: string, overrides?: CallOverrides): Promise<void>;

    strategyType(arg0: string, overrides?: CallOverrides): Promise<number>;

    "strategyType(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Borrow(
      user: string | null,
      optionID: BigNumberish | null,
      amount: null,
      strategy: null,
      timestamp: null
    ): EventFilter;

    ExerciseByPriorLiqPrice(
      user: string | null,
      optionID: BigNumberish | null,
      userReturn: null,
      poolReturn: null,
      liqFee: null
    ): EventFilter;

    ForcedExercise(
      user: string | null,
      optionID: BigNumberish | null,
      amount: null,
      poolProfit: null,
      liqFee: null
    ): EventFilter;

    Liquidate(
      user: string | null,
      optionID: BigNumberish | null,
      amount: null,
      poolProfit: null,
      liqFee: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Repay(
      user: string | null,
      optionID: BigNumberish | null,
      amount: null
    ): EventFilter;

    Unlock(user: string | null, optionID: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    COLLATERAL_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "COLLATERAL_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "INTEREST_RATE_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    LTV(overrides?: CallOverrides): Promise<BigNumber>;

    "LTV()"(overrides?: CallOverrides): Promise<BigNumber>;

    LTV_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "LTV_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PriorLiqPriceCoef(overrides?: CallOverrides): Promise<BigNumber>;

    "PriorLiqPriceCoef()"(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    "USDC()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowedByOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowedByOption(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUpcomingFee(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateUpcomingFee(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exerciseByPriorLiqPrice(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exerciseByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forcedExercise(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "forcedExercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    liqPrice(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "liqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    loanState(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "loanState(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanStateByPriorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanStateByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOption(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "lockOption(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maxBorrowLimit(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxBorrowLimit(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBorrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "minBorrowLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    operationalPool(overrides?: CallOverrides): Promise<BigNumber>;

    "operationalPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    priorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitByOption(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "profitByOption(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repay(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestRate(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestRateDecimals(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestRateDecimals(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLTV(value: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setLTV(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinBorrowLimit(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinBorrowLimit(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPool(value: string, overrides?: Overrides): Promise<BigNumber>;

    "setPool(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategyType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "strategyType(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlock(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLATERAL_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "COLLATERAL_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INTEREST_RATE_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INTEREST_RATE_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LTV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LTV()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LTV_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LTV_DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PriorLiqPriceCoef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PriorLiqPriceCoef()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "USDC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowedByOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowedByOption(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUpcomingFee(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateUpcomingFee(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exerciseByPriorLiqPrice(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exerciseByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forcedExercise(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forcedExercise(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    loanState(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanState(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanStateByPriorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanStateByPriorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockOption(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockOption(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxBorrowLimit(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxBorrowLimit(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBorrowLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minBorrowLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operationalPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operationalPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priorLiqPrice(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priorLiqPrice(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitByOption(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitByOption(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    repay(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repay(uint256,uint256)"(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestRate(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestRate(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestRateDecimals(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestRateDecimals(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLTV(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLTV(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinBorrowLimit(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinBorrowLimit(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPool(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPool(address)"(
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategyType(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strategyType(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlock(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
