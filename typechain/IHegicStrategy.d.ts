/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IHegicStrategyInterface extends ethers.utils.Interface {
  functions: {
    "exercise(uint256)": FunctionFragment;
    "priceProvider()": FunctionFragment;
    "profitOf(uint256)": FunctionFragment;
    "strategyData(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exercise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profitOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyData",
    data: BytesLike
  ): Result;

  events: {};
}

export class IHegicStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IHegicStrategyInterface;

  functions: {
    exercise(
      optionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exercise(uint256)"(
      optionID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    priceProvider(
      overrides?: CallOverrides
    ): Promise<{
      priceProvider: string;
      0: string;
    }>;

    "priceProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      priceProvider: string;
      0: string;
    }>;

    profitOf(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    "profitOf(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      0: BigNumber;
    }>;

    strategyData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "strategyData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  exercise(
    optionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exercise(uint256)"(
    optionID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  priceProvider(overrides?: CallOverrides): Promise<string>;

  "priceProvider()"(overrides?: CallOverrides): Promise<string>;

  profitOf(
    optionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "profitOf(uint256)"(
    optionID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strategyData(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    strike: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "strategyData(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    strike: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  callStatic: {
    exercise(optionID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exercise(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceProvider(overrides?: CallOverrides): Promise<string>;

    "priceProvider()"(overrides?: CallOverrides): Promise<string>;

    profitOf(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "profitOf(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "strategyData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      strike: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    exercise(optionID: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exercise(uint256)"(
      optionID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "priceProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    profitOf(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "profitOf(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategyData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "strategyData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exercise(
      optionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exercise(uint256)"(
      optionID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    priceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitOf(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profitOf(uint256)"(
      optionID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategyData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strategyData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
