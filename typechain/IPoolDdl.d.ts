/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPoolDdlInterface extends ethers.utils.Interface {
  functions: {
    "addTotalLocked(uint256)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "openDeDeLend()": FunctionFragment;
    "send(address,uint256)": FunctionFragment;
    "subTotalLocked(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTotalLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openDeDeLend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subTotalLocked",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTotalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openDeDeLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subTotalLocked",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPoolDdl extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPoolDdlInterface;

  functions: {
    addTotalLocked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTotalBalance(
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "getTotalBalance()"(
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    openDeDeLend(
      overrides?: CallOverrides
    ): Promise<{
      openDeDeLend: boolean;
      0: boolean;
    }>;

    "openDeDeLend()"(
      overrides?: CallOverrides
    ): Promise<{
      openDeDeLend: boolean;
      0: boolean;
    }>;

    send(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "send(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subTotalLocked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "subTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addTotalLocked(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTotalLocked(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  openDeDeLend(overrides?: CallOverrides): Promise<boolean>;

  "openDeDeLend()"(overrides?: CallOverrides): Promise<boolean>;

  send(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "send(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subTotalLocked(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "subTotalLocked(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addTotalLocked(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    openDeDeLend(overrides?: CallOverrides): Promise<boolean>;

    "openDeDeLend()"(overrides?: CallOverrides): Promise<boolean>;

    send(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "send(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subTotalLocked(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "subTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addTotalLocked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    openDeDeLend(overrides?: CallOverrides): Promise<BigNumber>;

    "openDeDeLend()"(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "send(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subTotalLocked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "subTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTotalLocked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openDeDeLend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "openDeDeLend()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "send(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subTotalLocked(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "subTotalLocked(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
